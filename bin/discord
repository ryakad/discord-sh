#! /bin/sh
#
# Library for integrating with the discord API
#
# Usage:
#
#   discord [method] [opts]
#

DISCORDSH_VERSION="0.0.0"
DISCORDSH_USER_AGENT="DiscordBot (https://github.com/ryakad/discord-sh, $DISCORDSH_VERSION)"
DISCORDSH_BASEPATH="$(dirname $0)/.."
DISCORDSH_ENDPOINTS_DIR="$DISCORDSH_BASEPATH/endpoints"

# Whether we want to be showing debug information
test -z $DISCORDSH_DEBUG && DISCORDSH_DEBUG=false

log_error() {
    $DISCORDSH_DEBUG && echo "[ERROR] $@" 1>&2
}

log_warning() {
    $DISCORDSH_DEBUG && echo "[WARNING] $@" 1>&2
}

log_debug() {
    $DISCORDSH_DEBUG && echo "[DEBUG] $@" 1>&2
}

# Function for multiline logging to allow prefixing each line with the log
# level for easier parsing of output.
#
# $1 - The logging function to use
# $2 - A string containing the multiline output
log_multiline() {
    echo "$2" | while read -r line
    do
        eval "$1 \"$line\""
    done
}

# Capture STDIN
if [ ! -t 0 ]
then
    while read line
    do
        if [ -z "$DISCORDSH_STDIN" ]
        then
            DISCORDSH_STDIN="$line"
        else
            DISCORDSH_STDIN="$DISCORDSH_STDIN\n$line"
        fi
    done < /dev/stdin
    log_debug "Setting STDIN to '$DISCORDSH_STDIN'"
fi

if [ ! -z "$DISCORDSH_STDIN" ]
then
    if ! echo "$DISCORDSH_STDIN" | jq . >/dev/null
    then
        log_error "Invalid json provided on stdin"
        exit 1
    fi

    # Need to compress the JSON or the curl requests will not work.
    DISCORDSH_STDIN="$(echo "$DISCORDSH_STDIN" | jq -c .)"
fi

# Return the value for a requested response header
#
# $1 - The response header we want the value for
# $2 - String containing all headings with 1 heading per line
get_response_header() {
    echo "$2" | grep -E "^$1:" | sed "s/^[^:]*: //" | sed 's/[^0-9]*//g'
}

# Parse out the status code from the curl response so we can check for rate
# error states
#
# $1 - stderr returned from curl
get_response_status() {
    echo "$1" | grep -E "^< HTTP/2" | sed -E "s/^< HTTP\/2 ([0-9]{3})/\1/" | sed 's/[^0-9]*//g'
}

# Redact the auth token from output. Call this on any output that may contain the
# users auth token.
#
# $1 - The content to redact the authorization token from
redact_auth_token() {
  echo "$1" | sed "s/Authorization: [^']*/Authorization: \[REDACTED\]/"
}

# Make an HTTP request using CURL
#
# $1 - The HTP verb to use for this request
# $2 - The endpoint path to request
# $3 - The data to submit (if any)
request() {
    http_verb="$1"
    path="$2"
    body="$3"

    # This function works on the global $path variable. There is no return
    # value as this is edited in place to allow us to exit this script from the
    # functions. Originally this was done in subshells which caused the `exit`
    # to only affect that subshell.
    replace_tokens "$path"

    log_debug "Making '$http_verb' request to '$path'"

    # Build up the curl request
    curl_opts="-sS -v -H 'Content-Type: application/json'"
    curl_opts=$curl_opts" -H 'Authorization: $DISCORDSH_API_TOKEN'"
    curl_opts=$curl_opts" -A '$DISCORDSH_USER_AGENT'"

    if ! echo "$http_verb" | grep -E '^GET|POST|PUT|PATCH|DELETE$' 2>&1 >/dev/null
    then
        log_error "HTTP Verb \"$http_verb\" is not supported"
        exit 1
    fi

    # Adding '-X GET' raises a warning stating that it not required as it is
    # assumed by default.
    if ! echo "$http_verb" | grep "GET" 2>&1 >/dev/null
    then
        curl_opts=$curl_opts" --request $http_verb"
    fi

    if [ ! -z "$DISCORDSH_STDIN" ]
    then
        curl_opts=$curl_opts" --data-raw '$DISCORDSH_STDIN'"
    elif [ "$http_verb" == "POST" ]
    then
        # We are making a post request but have not passed in any data on STDIN
        # so we still need to set the content length so just setting data to an
        # empty string.
        curl_opts=$curl_opts" --data-raw ''"
    fi

    # Do not display the users auth token in log messages
    log_debug "Using curl options: "$(redact_auth_token "$curl_opts")

    # Start pessimistic of rate limiting
    while true
    do
        curl_stderr_file="$(mktemp)"
        response_stdout=$(eval curl $curl_opts "$DISCORDSH_API_BASE_URL$path" 2>$curl_stderr_file)
        response_stderr="$(redact_auth_token "$(cat "$curl_stderr_file")")"
        rm -f "$curl_stderr_file"

        log_debug "Response stdout: $response_stdout"
        log_multiline log_debug "$response_stderr"

        response_status="$(get_response_status "$response_stderr")"
        # Transform the response headers into an array
        response_headers="$(echo "$response_stderr" \
            | grep -E '^<' \
            | sed 's/< //')"

        rate_limit_remaining=$(get_response_header "x-ratelimit-remaining" "$response_headers")
        rate_limit_reset=$(get_response_header "x-ratelimit-reset" "$response_headers")

        log_debug "Response Status Code: '$(echo $response_status)'"
        log_debug "Rate Limit Remaining: $rate_limit_remaining"
        log_debug "Rate Limit Reset: $rate_limit_reset"

        if [ "$response_status" = "429" ]
        then
          while [ "$(date +%s)" -lt "$rate_limit_reset" ]
          do
            log_warning "Rate Limited, Sleeping until rate limit reset..."
            sleep 1
          done
        else
            break
        fi
    done

    echo "$response_stdout" | jq
}

# Replace the tokens in urls with the values passed as CLI options
#
# $1 - The token we are looking to replace
# $2 - The value to use in place of "$2"
# $3 - The CLI option used to pass this value, used for printing an error message
replace_token() {
    if echo $path | grep -q "$1"
    then
        if [ -z "$2" ]
        then
            log_error "Missing required option $3"
            exit 1
        fi

        path="$(echo "$path" | sed "s/$1/$2/")"
        log_debug "Path replacement performed for $1. New request path is '$path'"
    fi
}

replace_tokens() {
    log_debug "Looking for tokens to replace..."

    replace_token "{guild.id}" "$OPTS_GUILD" "-g"
    replace_token "{channel.id}" "$OPTS_CHANNEL" "-c"
    replace_token "{user.id}" "$OPTS_USER" "-u"
    replace_token "{message.id}" "$OPTS_MESSAGE" "-m"
    replace_token "{role.id}" "$OPTS_ROLE" "-m"
    replace_token "{webhook.id}" "$OPTS_WEBHOOK_ID" "-w"
    replace_token "{webhook.token}" "$OPTS_WEBHOOK_TOKEN" "-t"
    replace_token "{integration.id}" "$OPTS_INTEGRATION" "-i"
    replace_token "{overwrite.id}" "$OPTS_OVERWRITE" "-o"
    replace_token "{emoji}" "$OPTS_EMOJI" "-e"
}

# Handle these options first since getopt will overwrite all command line
# options and we want to allow searching for 'help' and 'version' without any
# prefixed dashes.
if echo "$@" | grep -qE "\-\-help|help|\-h"
then
  echo "TODO - Display help message"
  exit 0
fi

if echo "$@" | grep -qE "\-\-version|version|\-v"
then
  echo "$DISCORDSH_VERSION"
  exit 0
fi

# This is required. This can either be a bot token or a user token. Using the
# correct format is up to the user
#
# DISCORDSH_API_TOKEN="Bot ...."      # FOR BOTS
# DISCORDSH_API_TOKEN="Bearer ...."   # FOR OAUTH TOKENS
#
if [ -z "$DISCORDSH_API_TOKEN" ]
then
    log_error "\$DISCORDSH_API_TOKEN must be set to a valid token"
    exit 1
fi

# Base URL for the discord api
test -z $DISCORDSH_API_BASE_URL && DISCORDSH_API_BASE_URL="https://discordapp.com/api"

method="$1"
shift

log_debug "Script called with endpoint "$method

opts=$(getopt h:v:g:u:c:m:o:i:e:r: $*)
eval set -- $opts
while true
do
    log_debug "Parsing command option '$1' = '$2'"

    case "$1" in
        -g) # Guild ID
            OPTS_GUILD="$2"
            shift 2
            ;;
        -u) # User ID
            OPTS_USER="$2"
            shift 2
            ;;
        -c) # Channel ID
            OPTS_CHANNEL="$2"
            shift 2
            ;;
        -m) # Message ID
            OPTS_MESSAGE="$2"
            shift 2
            ;;
        -r) # Role ID
            OPTS_ROLE="$2"
            shift 2
            ;;
        -p) # Permission Overwrite ID
            OPTS_OVERWRITE="$2"
            shift 2
            ;;
        -w) # Webhook ID
            OPTS_WEBHOOK_ID="$2"
            shift 2
            ;;
        -t) # Webhook Token
            OPTS_WEBHOOK_TOKEN="$2"
            shift 2
            ;;
        -i) # Integration ID
            OPTS_INTEGRATION="$2"
            shift 2
            ;;
        -e) # Emoji
            OPTS_EMOJI="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            log_error "Error parsing opts"
            exit 1
            ;;
    esac
done

case $method in
    # Audit Log endpoints
    'get-guild-audit-log')
        request 'GET' '/guilds/{guild.id}/audit-logs' ;;
    # Channel Endpoints
    'get-channel')
        request 'GET' '/channels/{channel.id}' ;;
    'modify-channel')
        request 'PUT' '/channels/{channel.id}' ;;
    'delete-channel'|'close-channel')
        request 'DELETE' '/channels/{channel.id}' ;;
    'get-channel-messages')
        request 'GET' '/channels/{channel.id}/messages' ;;
    'get-channel-message')
        request 'GET' '/channels/{channel.id}/messages/{message.id}' ;;
    'create-message')
        request 'POST' '/channels/{channel.id}/messages' ;;
    'create-reaction')
        request 'PUT' '/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me' ;;
    'delete-own-reaction')
        request 'DELETE' '/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me' ;;
    'delete-user-reaction')
        request 'DELETE' '/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}' ;;
    'get-reactions')
        request 'GET' '/channels/{channel.id}/messages/{message.id}/reactions/{emoji}' ;;
    'delete-all-reactions')
        request 'DELETE' '/channels/{channel.id}/messages/{message.id}/reactions' ;;
    'edit-message')
        request 'PATCH' '/channels/{channel.id}/messages/{message.id}' ;;
    'delete-message')
        request 'DELETE' '/channels/{channel.id}/messages/{message.id}' ;;
    'bulk-delete-messages')
        request 'POST' '/channels/{channel.id}/messages/bulk-delete' ;;
    'edit-channel-permissions')
        request 'PUT' '/channels/{channel.id}/permissions/{overwrite.id}' ;;
    'get-channel-invites')
        request 'GET' '/channels/{channel.id}/invites' ;;
    'create-channel-invite')
        request 'POST' '/channels/{channel.id}/invites' ;;
    'delete-channel-permission')
        request 'DELETE' '/channels/{channel.id}/permissions/{overwrite.id}' ;;
    'trigger-typing-indicator')
        request 'POST' '/channels/{channel.id}/typing' ;;
    'get-pinned-messages')
        request 'GET' '/channels/{channel.id}/pins' ;;
    'add-pinned-channel-message')
        request 'PUT' '/channels/{channel.id}/pins/{message.id}' ;;
    'delete-pinned-channel-message')
        request 'DELETE' '/channels/{channel.id}/pins/{message.id}' ;;
    'group-dm-add-recipient')
        request 'PUT' '/channels/{channel.id}/recipients/{user.id}' ;;
    'group-dm-remove-recipient')
        request 'DELETE' '/channels/{channel.id}/recipients/{user.id}' ;;
    # Emoji Endpoints
    'list-guild-emojis')
        request 'GET' '/guilds/{guild.id}/emojis' ;;
    'get-guild-emoji')
        request 'GET' '/guilds/{guild.id}/emojis/{emoji.id}' ;;
    'create-guild-emoji')
        request 'POST' '/guilds/{guild.id}/emojis' ;;
    'modify-guild-emoji')
        request 'PATCH' '/guilds/{guild.id}/emojis/{emoji.id}' ;;
    'delete-guild-emoji')
        request 'DELETE' '/guilds/{guild.id}/emojis/{emoji.id}' ;;
    # Guild Endpoints
    'create-guild')
        request 'POST' '/guilds' ;;
    'get-guild')
        request 'GET' '/guilds/{guild.id}' ;;
    'modify-guild')
        request 'PATCH' '/guilds/{guild.id}' ;;
    'delete-guild')
        request 'DELETE' '/guilds/{guild.id}' ;;
    'get-guild-channels')
        request 'GET' '/guilds/{guild.id}/channels' ;;
    'create-guild-channel')
        request 'POST' '/guilds/{guild.id}/channels' ;;
    'modify-guild-channel-positions')
        request 'PATCH' '/guilds/{guild.id}/channels' ;;
    'get-guild-member')
        request 'GET' '/guilds/{guild.id}/members/{user.id}' ;;
    'list-guild-members')
        request 'GET' '/guilds/{guild.id}/members' ;;
    'add-guild-member')
        request 'PUT' '/guilds/{guild.id}/members/{user.id}' ;;
    'modify-guild-member')
        request 'PATCH' '/guilds/{guild.id}/members/{user.id}' ;;
    'modify-current-user-nick')
        request 'PATCH' '/guilds/{guild.id}/members/@me/nick' ;;
    'add-guild-member-role')
        request 'PUT' '/guilds/{guild.id}/members/{user.id}/roles/{role.id}' ;;
    'remove-guild-member-role')
        request 'DELETE' '/guilds/{guild.id}/members/{user.id}/roles/{role.id}' ;;
    'remove-guild-member')
        request 'DELETE' '/guilds/{guild.id}/members/{user.id}' ;;
    'get-guild-bans')
        request 'GET' '/guilds/{guild.id}/bans' ;;
    'get-guild-ban')
        request 'GET' '/guilds/{guild.id}/bans/{user.id}' ;;
    'create-guild-ban')
        request 'PUT' '/guilds/{guild.id}/bans/{user.id}' ;;
    'remove-guild-ban')
        request 'DELETE' '/guilds/{guild.id}/bans/{user.id}' ;;
    'get-guild-roles')
        request 'GET' '/guilds/{guild.id}/roles' ;;
    'create-guild-role')
        request 'POST' '/guilds/{guild.id}/roles' ;;
    'modify-guild-role-positions')
        request 'PATCH' '/guilds/{guild.id}/roles' ;;
    'modify-guild-role')
        request 'PATCH' '/guilds/{guild.id}/roles/{role.id}' ;;
    'delete-guild-role')
        request 'DELETE' '/guilds/{guild.id}/roles/{role.id}' ;;
    'get-guild-prune-count')
        request 'GET' '/guilds/{guild.id}/prune' ;;
    'begin-guild-prune')
        request 'POST' '/guilds/{guild.id}/prune' ;;
    'get-guild-voice-regions')
        request 'GET' '/guilds/{guild.id}/regions' ;;
    'get-guild-invites')
        request 'GET' '/guilds/{guild.id}/invites' ;;
    'get-guild-integrations')
        request 'GET' '/guilds/{guild.id}/integrations' ;;
    'create-guild-integration')
        request 'POST' '/guilds/{guild.id}/integrations' ;;
    'modify-guild-integration')
        request 'PATCH' '/guilds/{guild.id}/integrations/{integration.id}' ;;
    'delete-guild-integration')
        request 'DELETE' '/guilds/{guild.id}/integrations/{integration.id}' ;;
    'sync-guild-integration')
        request 'POST' '/guilds/{guild.id}/integrations/{integration.id}/sync' ;;
    'get-guild-embed')
        request 'GET' '/guilds/{guild.id}/embed' ;;
    'modify-guild-embed')
        request 'PATCH' '/guilds/{guild.id}/embed' ;;
    'get-guild-vanity-url')
        request 'GET' '/guilds/{guild.id}/vanity-url' ;;
    # Invite Endpoints
    'get-invite')
        request 'GET' '/invites/{invite.code}' ;;
    'delete-invite')
        request 'DELETE' '/invites/{invite.code}' ;;
    # User Endpoints
    'get-current-user')
        request 'GET' '/users/@me' ;;
    'get-user')
        request 'GET' '/users/{user.id}' ;;
    'modify-current-user')
        request 'PATCH' '/users/@me' ;;
    'get-current-user-guilds')
        request 'GET' '/users/@me/guilds' ;;
    'leave-guild')
        request 'DELETE' '/users/@me/guilds/{guild.id}' ;;
    'get-user-dms')
        request 'GET' '/users/@me/channels' ;;
    'create-dm')
        request 'POST' '/users/@me/channels' ;;
    'create-group-dm')
        request 'POST' '/users/@me/channels' ;;
    'get-user-connections')
        request 'GET' '/users/@me/connections' ;;
    # Voice Endpoints
    'list-voice-regions')
        request 'GET' '/voice/regions' ;;
    # Webhook Endpoints
    'create-webhook')
        request 'POST' '/channels/{channel.id}/webhooks' ;;
    'get-channel-webhooks')
        request 'GET' '/channels/{channel.id}/webhooks' ;;
    'get-guild-webhooks')
        request 'GET' '/guilds/{guild.id}/webhooks' ;;
    'get-webhook')
        request 'GET' '/webhooks/{webhook.id}' ;;
    'get-webhook-with-token')
        request 'GET' '/webhooks/{webhook.id}/{webhook.token}' ;;
    'modify-webhook')
        request 'PATCH' '/webhooks/{webhook.id}' ;;
    'modify-webhook-with-token')
        request 'PATCH' '/webhooks/{webhook.id}/{webhook.token}' ;;
    'delete-webhook')
        request 'DELETE' '/webhooks/{webhook.id}' ;;
    'delete-webhook-with-token')
        request 'DELETE' '/webhooks/{webhook.id}/{webhook.token}' ;;
    'execute-webhook')
        request 'POST' '/webhooks/{webhook.id}/{webhook.token}' ;;
    'execute-slack-compatible-webhook')
        request 'POST' '/webhooks/{webhook.id}/{webhook.token}/slack' ;;
    'execute-github-compatible-webhook')
        request 'POST' '/webhooks/{webhook.id}/{webhook.token}/github' ;;
    *)
        log_error "Unsupported method \"$method\""
        exit 1
        ;;
esac
